plugins {
    id 'java'
    id 'eclipse'

    // https://imperceptiblethoughts.com/shadow/
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    
    id "com.github.spotbugs" version "1.7.1"
}

sourceCompatibility = 11
targetCompatibility = 11

version = appVersion
wrapper.gradleVersion = '5.5.1'

import org.gradle.internal.os.OperatingSystem

ext {
    mainClass = 'com.gideonsoftware.mist.MIST';
    swtVersion = "4.12"
    shadowJar.classifier = "fat"

    mistLibraryPath = file("${buildDir}/libs")
    shadowJarPath   = file("${mistLibraryPath}/" + shadowJar.archiveFileName.get())
    jdepsReportPath = file("${buildDir}/reports/jdeps.txt")
    javaRuntimePath = file("${buildDir}/java-runtime")
    bundlePath      = file("${buildDir}/bundle")

    operatingSystem = OperatingSystem.current()
    if (operatingSystem.isWindows()) {
        swtOs = 'win64'
        appDist = 'win64'
        // packageType (installer) will be manually done via InnoSetup
        bundlerScript = file('package/bin/build-package.bat')
        appIcon = file('package/icons/mist.ico')
        extraJdepsArguments = ['--ignore-missing-deps']
        extraBundlerArguments = []
        appInfoTxtPath = file("${bundlePath}/appinfo.txt")
        innoSetupCompilerPath = file("C:\\Program Files (x86)\\Inno Setup 6\\iscc.exe")
        innoSetupInstallPath = file("package/os/windows/mist.iss")
        installerPath = "$bundlePath\\$appName-$appVersion-$appDist-setup.exe"
    } else if (operatingSystem.isMacOsX()) {
        swtOs = 'macosx'
        packageType = 'dmg'
        bundlerScript = file('package/bin/build-package.sh')
        appIcon = file('package/icons/mist.icns')
        installerPath = "" // TODO
        extraJdepsArguments = []
        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        swtOs = 'linux'
        packageType = 'deb'
        jpackagerPath = file("/opt/jpackager/jpackager")
        bundlerScript = file('package/bin/build-package.sh')
        appIcon = file('package/icons/mist-180x180.png')
        extraJdepsArguments = []
        extraBundlerArguments = []
    }
}

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes('Main-Class': mainClass,
                   'Implementation-Title': appName,
                   'Implementation-Version': appVersion,
                   'Implementation-Vendor': appPublisher,
                   'Multi-Release' : 'true') // See https://stackoverflow.com/questions/53049346/is-log4j2-compatible-with-java-11
    }
}

shadowJar {
//    minimize()
}

dependencies {
    // Logging
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'

    // Command line option processing
    // https://mvnrepository.com/artifact/net.sf.jopt-simple/jopt-simple
    implementation group: 'net.sf.jopt-simple', name: 'jopt-simple', version: '4.5'

    // Email server access
    // https://mvnrepository.com/artifact/com.sun.mail/javax.mail
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2' 
    // https://mvnrepository.com/artifact/com.sun.mail/gimap
    implementation group: 'com.sun.mail', name: 'gimap', version: '1.6.3'    

    // Google (Gmail) authentication    
    // https://developers.google.com/api-client-library/java/apis/oauth2/v1
    implementation group: 'com.google.apis', name: 'google-api-services-oauth2', version: 'v2-rev20190313-1.30.1'
    implementation group: 'com.google.oauth-client', name:'google-oauth-client-java6', version: '1.23.0'
    implementation group: 'com.google.oauth-client', name:'google-oauth-client-jetty', version: '1.23.0'
    
    // HTML email parsing
    // https://mvnrepository.com/artifact/net.htmlparser.jericho/jericho-html
    implementation group: 'net.htmlparser.jericho', name: 'jericho-html', version: '3.4'

    // TntConnect MS Access database
    // https://mvnrepository.com/artifact/net.sf.ucanaccess/ucanaccess
    implementation group: 'net.sf.ucanaccess', name: 'ucanaccess', version: '4.0.4'

    // Money type
    // https://mvnrepository.com/artifact/org.javamoney.moneta/moneta-core
    implementation group: 'org.javamoney.moneta', name: 'moneta-core', version: '1.3'

    // SWT/JFace UI; note that SWT is platform-specific and is stored locally    
    // https://mvnrepository.com/artifact/org.eclipse.platform/org.eclipse.jface
    implementation (group: 'org.eclipse.platform', name: 'org.eclipse.jface', version: '3.16.0') {
        exclude group:'org.eclipse.platform', module: 'org.eclipse.swt'
    }
    implementation files("lib/swt/${swtOs}/swt-${swtVersion}.jar")

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'

    testImplementation group: 'junit', name: 'junit', version: '4.11'
}

eclipse {
    classpath {
        file {
            whenMerged {
                def swtlib = entries.find { it.path.contains "swt-${swtVersion}.jar" }
                swtlib.sourcePath = fileReference(file("lib/swt/${swtOs}/swt-${swtVersion}-sources.zip"))
            }
        }
    }
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

task jdepsReport() {
    dependsOn 'shadowJar'
    group 'packaging'
    description 'Determine the needed Java modules'
//    inputs.file shadowJarPath  // We don't need to rerun jdeps, so skip this unless clean build
    outputs.file jdepsReportPath
    
    doLast {
        // Create parent directories if needed
        if (jdepsReportPath.getParentFile() != null) {
            jdepsReportPath.getParentFile().mkdirs();
        }    
        
        def stdOut = new FileOutputStream(jdepsReportPath)
        exec {
            workingDir "${buildDir}"
            
            // jdeps --multi-release 11 [--ignore-missing-deps] --print-module-deps -cp libs <fat MIST jar>
            executable = 'jdeps'
            args = [
                '--multi-release', '11',
                *extraJdepsArguments, // Needed on Windows but not on Linux (Mac?)
                '--print-module-deps',
                "-cp", "${mistLibraryPath}", 
                shadowJarPath]
          
            standardOutput = stdOut
        }
    }
}

task javaRuntime() {
    dependsOn 'jdepsReport'
    group 'packaging'
    description 'Create a custom Java Runtime'
    inputs.file jdepsReportPath
    outputs.dir javaRuntimePath
    
    doLast {
        // outputs.dir creates the directory if it doesn't exist, but jlink will fail if the directory exists
        if (javaRuntimePath.exists()) {
            javaRuntimePath.deleteDir()
        }
        
        exec {
            workingDir "${buildDir}"
            
            def moduleList = jdepsReportPath.text.trim();  // Need trim() else error (EOL?)
            
            // jlink --output <runtime loc> --no-header-files --no-man-pages --compress=2 --strip-debug --add-modules <modules>
            executable = 'jlink'
            args = [
                '--output', "${javaRuntimePath}",
                '--no-header-files',
                '--no-man-pages',
                '--compress=2',
                '--strip-debug',
                '--add-modules', moduleList]
        }
    }
}

task createBundle() {
    dependsOn 'javaRuntime'
    group 'packaging'
    description 'Build the installable bundle'
    inputs.file shadowJarPath 
    inputs.dir javaRuntimePath
    outputs.dir bundlePath

    doLast {
        exec {
            workingDir "${buildDir}"
            
            // Need to use a backport of jpackager for JDK 11
            // See https://mail.openjdk.java.net/pipermail/openjfx-dev/2018-September/022500.html?source=post_page---------------------------
            // For Windows:
            // - Move jpackager.exe -> %JAVA_HOME%\bin
            // - Move jdk.packager.jar -> %JAVA_HOME%\jmods            
            
            // Due to JDK BUG 8217793 (https://bugs.openjdk.java.net/browse/JDK-8217793), 
            // jpackager throws an exception claiming that "Modules are not allowed in srcfiles"
            // This is throw in regard to jlink, so if we call jlink (to create a java runtime) 
            // explicitly first, we can work around the bug  (Last checked 2019-07-25)            

            if (operatingSystem.isWindows()) {

                // jpackager creates a ton of [unneeded?] DLLs in the resulting bundle
                // See https://bugs.openjdk.java.net/browse/JDK-8222504 (Last checked 2019-07-25)

                commandLine 'cmd', '/c',
                    bundlerScript,                      // The build script itself
                    appName,                            // app name
                    mistLibraryPath,                    // input
                    bundlePath,                         // output
                    javaRuntimePath,                    // custom java runtime
                    shadowJar.archiveFileName.get(),    // jar
                    version,                            // version
                    appIcon                             // app icon
            } else {
                commandLine = ['sh',
                    bundlerScript,                      // The build script itself
                    jpackagerPath,                      // jpackager path
                    packageType,                        // Installer type (e.g. dmg, deb)
                    appName.toLowerCase(),              // app name
                    mistLibraryPath,                    // input
                    bundlePath,                         // output
                    javaRuntimePath,                    // custom java runtime
                    shadowJar.archiveFileName.get(),    // jar
                    version,                            // version
                    appIcon,                            // app icon
                    *extraBundlerArguments]
            }
        }
    }    
}

// Additional processing for completing Windows bundle with InnoSetup
if (operatingSystem.isWindows()) {

    task appInfoTxt() {
        group 'packaging'
        description 'Create the appInfo.txt file needed by InnoSetup'
        outputs.file appInfoTxtPath
        
        doLast {
            // First create the appInfo.txt file with needed properties
            appInfoTxtPath.text = """; Auto-generated by MIST build script
#define AppId "${appId}"
#define AppName "${appName}"
#define AppComment "${appLongname}"
#define AppVersionShort "${appVersion}"
#define AppVersionLong "${appVersion}"
#define AppURL "${appUrl}"
#define AppCopyright "${appCopyright}"
#define AppPublisher "${appPublisher}"
#define AppExeName "${appName}.exe"
#define AppDist "${appDist}"
"""
        }
    }

    task innoSetup() {
        dependsOn 'appInfoTxt'
        group 'packaging'
        description 'Run InnoSetup to generate the Windows installer'
        inputs.dir "$bundlePath/$appName"
        inputs.file appInfoTxtPath
        outputs.file installerPath
        
        doLast {
            exec {
                workingDir "${buildDir}"
                
                // <innoSetup compiler> <install file path>
                executable = "${innoSetupCompilerPath}"
                args = [
//                    '/Qp',
                    "${innoSetupInstallPath}"]
            }
        }
    }

    createBundle.finalizedBy innoSetup
}
